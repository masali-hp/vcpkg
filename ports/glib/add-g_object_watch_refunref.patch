From 743b42b3533ba73262bae2df8a6c3097346038dc Mon Sep 17 00:00:00 2001
From: Mark Salisbury <mark.salisbury@hp.com>
Date: Wed, 27 Mar 2019 17:52:46 -0600
Subject: [PATCH] Add g_object_watch_refunref

g_object_watch_refunref makes it possible to watch refs/unrefs to a
particular object.
---
 gobject/gobject.c | 25 +++++++++++++++++++++++++
 gobject/gobject.h | 10 ++++++++++
 2 files changed, 35 insertions(+)

diff --git a/gobject/gobject.c b/gobject/gobject.c
index d04f89c..f23cd47 100644
--- a/gobject/gobject.c
+++ b/gobject/gobject.c
@@ -3034,6 +3034,19 @@ g_object_remove_toggle_ref (GObject       *object,
     g_warning ("%s: couldn't find toggle ref %p(%p)", G_STRFUNC, notify, data);
 }
 
+static gpointer watchedRef = 0;
+static g_object_watch_output watchCallback = 0;
+static void * watchRefContext = 0;
+static int refDerefCounter = 0;
+
+void g_object_watch_refunref(gpointer object, g_object_watch_output callback, void * context)
+{
+    refDerefCounter = 0;
+    watchedRef = object;
+    watchCallback = callback;
+    watchRefContext = context;
+}
+
 /**
  * g_object_ref:
  * @object: (type GObject.Object): a #GObject
@@ -3058,6 +3071,10 @@ g_object_ref (gpointer _object)
 
   TRACE (GOBJECT_OBJECT_REF(object,G_TYPE_FROM_INSTANCE(object),old_val));
 
+  if (watchedRef == _object) {
+      watchCallback(object, G_REF, refDerefCounter++, old_val, old_val + 1, watchRefContext);
+  }
+
   return object;
 }
 
@@ -3095,6 +3112,10 @@ g_object_unref (gpointer _object)
 
       TRACE (GOBJECT_OBJECT_UNREF(object,G_TYPE_FROM_INSTANCE(object),old_ref));
 
+      if (watchedRef == _object) {
+          watchCallback(object, G_UNREF, refDerefCounter++, old_ref, old_ref - 1, watchRefContext);
+      }
+
       /* if we went from 2->1 we need to notify toggle refs if any */
       if (old_ref == 2 && has_toggle_ref) /* The last ref being held in this case is owned by the toggle_ref */
 	toggle_refs_notify (object, TRUE);
@@ -3143,6 +3164,10 @@ g_object_unref (gpointer _object)
           g_rw_lock_writer_unlock (&weak_locations_lock);
         }
 
+      if (watchedRef == _object) {
+          watchCallback(object, G_UNREF, refDerefCounter++, 1, 0, watchRefContext);
+      }
+
       /* we are about to remove the last reference */
       TRACE (GOBJECT_OBJECT_DISPOSE(object,G_TYPE_FROM_INSTANCE(object), 1));
       G_OBJECT_GET_CLASS (object)->dispose (object);
diff --git a/gobject/gobject.h b/gobject/gobject.h
index 32ab997..26db31b 100644
--- a/gobject/gobject.h
+++ b/gobject/gobject.h
@@ -478,6 +478,16 @@ GLIB_AVAILABLE_IN_ALL
 gpointer    g_object_ref                      (gpointer        object);
 GLIB_AVAILABLE_IN_ALL
 void        g_object_unref                    (gpointer        object);
+
+typedef enum {
+  G_REF        = 0,
+  G_UNREF      = 1
+} GRefUnrefEnum;
+
+typedef void(*g_object_watch_output)(GObject * obj, GRefUnrefEnum, int count, int old_val, int new_val, void * context);
+GLIB_AVAILABLE_IN_ALL
+void        g_object_watch_refunref           (gpointer        object, g_object_watch_output, void * context);
+
 GLIB_AVAILABLE_IN_ALL
 void	    g_object_weak_ref		      (GObject	      *object,
 					       GWeakNotify     notify,
-- 
2.19.1.windows.1

